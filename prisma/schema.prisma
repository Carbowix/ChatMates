// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

enum userStatus {
  ONLINE
  OFFLINE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  status                 userStatus      @default(OFFLINE)
  biography              String          @default("")
  friends                User[]          @relation("Friendship")
  friendsOf              User[]          @relation("Friendship")
  accounts               Account[]
  sessions               Session[]
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  ChatRooms              ChatRoom[]      @relation("chatRooms")
  Message                Message[]
}

model FriendRequest {
  id         Int      @id @default(autoincrement())
  senderId   String
  receiverId String
  status     String // Enum or string field to represent request status (e.g., "pending," "accepted," "rejected")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiver User @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
}

model ChatRoom {
  id       String    @id @default(cuid())
  users    User[]    @relation("chatRooms")
  messages Message[]
}

model Message {
  id         Int      @id
  sender     User     @relation(fields: [userId], references: [id])
  ChatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId String
  userId     String
}
